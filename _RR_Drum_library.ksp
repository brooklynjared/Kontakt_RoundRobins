

macro rr.config(multi_mic) {multi-mic (1 for yes, 0 for single mic)}
	declare const $MULTI_MIC := multi_mic

end macro


{ ----- Congifure NON-RR zones and groups ---- }

macro rr.init_create_non_RR_zone(note, name, color_constant, mic1_grp_ID, mic2_grp_ID, mic3_grp_ID) {note, name, color_constant, mic1_grp_ID, mic2_grp_ID, mic3_grp_ID}

	{set the group ID for this key}
	{More than one key could belong to the same group ex L/R snare mapping}

	if (mic1_grp_ID > -1)
		%key_to_group_ID_mic1[note] := mic1_grp_ID		
	end if

	if (mic2_grp_ID > -1)
		%key_to_group_ID_mic2[note] := mic2_grp_ID
	end if

	if (mic3_grp_ID > -1)
		%key_to_group_ID_mic3[note] := mic3_grp_ID
	end if


	{set key color}
	set_key_color(note, color_constant)

	{set key name}
	set_key_name(note, name)

end macro

{ ----- Configure RR SETS zones and groups -----}

{Use this macro to configure RR sets if the instrument only has one mic-position/mix}
macro rr.init_create_basic_set(note, name, RR_max, grp_ID, color_constant) {note, name (a string), RR_max, grp_ID, color constant (ex. $KEY_COLOR_RED)}

	{set the mode to RR}
	%key_to_mode[note] := 1

	{set the group ID for this key}
	{More than one key could belong to the same group ex L/R snare mapping}
	%key_to_group_ID[note] := grp_ID 

	{For each key, stores the cycle max for the key's RR set}
	%key_to_cycle_max[note] := RR_max

	{Add a name for the key}
	!key_to_name[note] := name

	{set key color}
	set_key_color(note, color_constant)

	{set key name}
	set_key_name(note, name)

end macro


{Use these macros to create sets for instruments with multiple mic-positions/mixes}
macro rr.init_create_mic1_set(note, name, RR_max, grp_ID, color_constant) {note, name (a string), RR_max, grp_ID, color constant (ex. $KEY_COLOR_RED)}

	{set the mode to RR}
	%key_to_mode[note] := 1

	{set the group ID for this key}
	{More than one key could belong to the same group ex L/R snare mapping}
	%key_to_group_ID_mic1[note] := grp_ID 

	{For each key, stores the cycle max for the key's RR set}
	%key_to_cycle_max[note] := RR_max

	{Add a name for the key}
	!key_to_name[note] := name

	{set key color}
	set_key_color(note, color_constant)

	{set key name}
	set_key_name(note, name)

end macro


{Mic 2}
macro rr.init_create_mic2_set(note, grp_ID) {note, grp_ID (group ID for this particular mic position), #mic_number# (ex. #2#)}
	%key_to_group_ID_mic2[note] := grp_ID
end macro

{Mic 3}
macro rr.init_create_mic3_set(note, grp_ID) {note, grp_ID (group ID for this particular mic position), #mic_number# (ex. #2#)}
	%key_to_group_ID_mic3[note] := grp_ID
end macro





{ ----- FUNCTIONS ----- }

macro rr.advance_cylce_function()
	function func_advance_cycle_position()

	    {advance the cycle position}
        if (%key_to_cycle_pos[$current_note] < %key_to_cycle_max[$current_note] - 1)
            inc(%key_to_cycle_pos[$current_note])
        else
            %key_to_cycle_pos[$current_note] := 0
        end if

        if ($RR_DEBUG_MODE = 1)
            message("Current position: " & %key_to_cycle_pos[$current_note])            
        end if

	end function
end macro


{If the instrument has mic position mute buttons use this function to disallow muted groups for the non-RR samples}
macro rr.disallow_muted_mic_grps() 

	function func_disallow_muted_mic_grps()

		if ($btn_mute_mic1 = 1)
			i :=0
			while (i < 128 )
				disallow_group(%key_to_group_ID_mic1[i])
				inc(i)
			end while
		end if

		if ($btn_mute_mic2 = 1)
			i :=0
			while (i < 128 )
				disallow_group(%key_to_group_ID_mic2[i])
				inc(i)
			end while
		end if

		if ($btn_mute_mic3 = 1)
			i :=0
			while (i < 128 )
				disallow_group(%key_to_group_ID_mic3[i])
				inc(i)
			end while
		end if
	end function

end macro


macro rr.allow_unmuted_mic_groups_per_key((#mic1_mute_btn#, #mic2_mute_btn#, #mic3_mute_btn#))

	function allow_unmuted_mic_groups_per_key()

		if (#mic1_mute_btn = 0) {not muted}
			allow_group(%key_to_group_ID_mic1[current_note])
		end if

		if (#mic2_mute_btn = 1) {not muted}
			allow_group(%key_to_group_ID_mic2[current_note])
		end if

		if (#mic3_mute_btn = 1) {not muted}
			allow_group(%key_to_group_ID_mic3[current_note])
		end if

	end function

end macro
